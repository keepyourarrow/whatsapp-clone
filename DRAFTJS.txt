import React, { useState, useRef, useEffect } from "react";
import {
  PencilSolid,
  CheckOutline,
  EmojiHappyOutline,
} from "@graywolfai/react-heroicons";
import { SidebarHeader } from "../../reusable/SidebarHeader";
import ReactTooltip from "react-tooltip";
import {
  Editor,
  EditorState,
  ContentState,
  convertToRaw,
  convertFromRaw,
} from "draft-js";
import "draft-js/dist/Draft.css";

function ProfileIconSVG() {
  return (
    <svg
      className="w-48 h-48"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 212 212"
      width="212"
      height="212"
    >
      <path
        fill="#DFE5E7"
        d="M106.251.5C164.653.5 212 47.846 212 106.25S164.653 212 106.25 212C47.846 212 .5 164.654.5 106.25S47.846.5 106.251.5z"
      ></path>
      <path
        fill="#FFF"
        d="M173.561 171.615a62.767 62.767 0 0 0-2.065-2.955 67.7 67.7 0 0 0-2.608-3.299 70.112 70.112 0 0 0-3.184-3.527 71.097 71.097 0 0 0-5.924-5.47 72.458 72.458 0 0 0-10.204-7.026 75.2 75.2 0 0 0-5.98-3.055c-.062-.028-.118-.059-.18-.087-9.792-4.44-22.106-7.529-37.416-7.529s-27.624 3.089-37.416 7.529c-.338.153-.653.318-.985.474a75.37 75.37 0 0 0-6.229 3.298 72.589 72.589 0 0 0-9.15 6.395 71.243 71.243 0 0 0-5.924 5.47 70.064 70.064 0 0 0-3.184 3.527 67.142 67.142 0 0 0-2.609 3.299 63.292 63.292 0 0 0-2.065 2.955 56.33 56.33 0 0 0-1.447 2.324c-.033.056-.073.119-.104.174a47.92 47.92 0 0 0-1.07 1.926c-.559 1.068-.818 1.678-.818 1.678v.398c18.285 17.927 43.322 28.985 70.945 28.985 27.678 0 52.761-11.103 71.055-29.095v-.289s-.619-1.45-1.992-3.778a58.346 58.346 0 0 0-1.446-2.322zM106.002 125.5c2.645 0 5.212-.253 7.68-.737a38.272 38.272 0 0 0 3.624-.896 37.124 37.124 0 0 0 5.12-1.958 36.307 36.307 0 0 0 6.15-3.67 35.923 35.923 0 0 0 9.489-10.48 36.558 36.558 0 0 0 2.422-4.84 37.051 37.051 0 0 0 1.716-5.25c.299-1.208.542-2.443.725-3.701.275-1.887.417-3.827.417-5.811s-.142-3.925-.417-5.811a38.734 38.734 0 0 0-1.215-5.494 36.68 36.68 0 0 0-3.648-8.298 35.923 35.923 0 0 0-9.489-10.48 36.347 36.347 0 0 0-6.15-3.67 37.124 37.124 0 0 0-5.12-1.958 37.67 37.67 0 0 0-3.624-.896 39.875 39.875 0 0 0-7.68-.737c-21.162 0-37.345 16.183-37.345 37.345 0 21.159 16.183 37.342 37.345 37.342z"
      ></path>
    </svg>
  );
}
function CameraIconSvg() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width="24"
      height="24"
    >
      <path
        fill="currentColor"
        d="M21.317 4.381H10.971L9.078 2.45c-.246-.251-.736-.457-1.089-.457H4.905c-.352 0-.837.211-1.078.468L1.201 5.272C.96 5.529.763 6.028.763 6.38v1.878l-.002.01v11.189a1.92 1.92 0 0 0 1.921 1.921h18.634a1.92 1.92 0 0 0 1.921-1.921V6.302a1.92 1.92 0 0 0-1.92-1.921zM12.076 18.51a5.577 5.577 0 1 1 0-11.154 5.577 5.577 0 0 1 0 11.154zm0-9.506a3.929 3.929 0 1 0 0 7.858 3.929 3.929 0 0 0 0-7.858z"
      ></path>
    </svg>
  );
}

function __textLength__(fieldNum, text) {
  let text_length = "";
  if (fieldNum === 1) {
    text_length = 25 - text.length;
  } else {
    text_length = 120 - text.length;
  }

  return text_length;
}
function __check_pasted_text__(fieldNum, existingText, pastedText) {
  let exceeds_limits = false;
  if (fieldNum === 1) {
    return existingText.length + pastedText.length <= 25 ? false : true;
  } else {
    return existingText.length + pastedText.length <= 120 ? false : true;
  }
}

const FieldEdit = ({ title, content, fieldNum }) => {
  const textInput = useRef(null);
  const [editing, setEditing] = useState(false);
  const [editorState, setEditorState] = useState(() =>
    EditorState.createWithContent(ContentState.createFromText(content))
  );
  const [cursorPos, setCursorPos] = useState({
    cursorEnd: null,
    cursorStart: null,
  });

  const [textLength, setTextLength] = useState(0);

  useEffect(() => {
    // let cursorStart = textInput.selectionStart;
    // let cursorEnd = textInput.selectionStart;

    setCursorPos({
      cursorStart: textInput.selectionStart,
      cursorEnd: textInput.selectionEnd,
    });
    console.log(cursorPos.cursorStart, "cursorStart");
    console.log(cursorPos.cursorEnd, "cursorEnd");
  }, []);

  useEffect(() => {
    // const newState = EditorState.createEmpty();
    // setEditorState(EditorState.moveFocusToEnd(editorState));
  }, [editing]);

  useEffect(() => {
    // console.log(editorState.get);
    setTextLength(
      __textLength__(
        fieldNum,
        convertToRaw(editorState.getCurrentContent()).blocks[0].text
      )
    );
    if (textLength === 1) {
      setEditorState(editorState);
    }
  }, [editorState]);

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      setEditing(false);
    }
  };
  const handleEdit = () => {
    setEditing(true);
    //to move cursor to end
    setEditorState(EditorState.moveFocusToEnd(editorState));
    setTimeout(() => {
      textInput.current.focus();
    }, 0);
  };
  const handleBeforeInput = () => {
    let cursorStart = textInput.selectionStart;
    let cursorEnd = textInput.selectionStart;

    console.log(cursorStart, "cursorStart");
    console.log(cursorEnd, "cursorEnd");
    return textLength === 1 && "handled";
  };
  const handlePastedText = (pastedText) => {
    let isExceedingLimits = __check_pasted_text__(
      fieldNum,
      convertToRaw(editorState.getCurrentContent()).blocks[0].text,
      pastedText
    );
    if (isExceedingLimits) {
      return "handled";
    }

    return textLength === 1 && "handled";
  };

  return (
    <div className="px-8 pt-2 pb-4 bg-white w-full shadow">
      <div className="mb-4 text-green-title text-sm">{title}</div>
      <div
        className={
          "flex justify-between items-start pb-1 border-b-2 border-transparent " +
          (editing && "border-green-header")
        }
      >
        <div className="w-full overflow-hidden">
          <Editor
            editorState={editorState}
            onChange={setEditorState}
            onKeyPress={handleKeyPress}
            ref={textInput}
            readOnly={!editing && true}
            tabIndex="-1"
            handleBeforeInput={handleBeforeInput}
            handlePastedText={handlePastedText}
            onEscape={() => setEditing(false)}
          />
        </div>
        {/* <div
          className="text-gray-700 focus:outline-none w-full"
          contentEditable={editing ? true : false}
          suppressContentEditableWarning={true}
          ref={textInput}
          onKeyPress={handleKeyPress}
          onKeyDown={handleKeyPress}
        >
          {content}
        </div> */}

        {!editing ? (
          <button
            type="button"
            className="h-6 w-6 text-gray-900 text-opacity-50 focus:outline-none"
            data-tip=""
            data-for={"edit" + fieldNum}
            onClick={handleEdit}
          >
            <abbr title="Edit">
              <PencilSolid />
            </abbr>
          </button>
        ) : (
          //  IF WE ARE EDITING

          <div className="flex items-center space-x-1">
            {textLength}
            <EmojiHappyOutline />
            <button
              type="button"
              data-tip=""
              data-for={"checkmark" + fieldNum}
              className="h-6 w-6 text-gray-900 text-opacity-50 focus:outline-none"
              onClick={() => setEditing(false)}
            >
              <abbr title="Click to Save, Esc to cancel.">
                <CheckOutline />
              </abbr>
            </button>
          </div>
        )}
      </div>
      {/* <ReactTooltip
        id={(!editing ? "edit" : "checkmark") + fieldNum}
        place="bottom"
        effect="solid"
        delayShow={1000}
        // globalEventOff="click"
      >
        {!editing ? "Edit" : "Click to Save, Esc to cancel."}
      </ReactTooltip> */}
    </div>
  );
};

export const EditProfile = ({ setSidebarView }) => {
  return (
    <>
      <SidebarHeader title="Profile" setSidebarView={setSidebarView} />
      <section>
        <div className="flex items-center justify-center py-8 px-4">
          <div className="relative">
            <ProfileIconSVG />
            <div className="absolute top-0 flex flex-col items-center justify-center space-y-2 rounded-full w-full h-full bg-darker-gray text-white">
              <CameraIconSvg />
              <span className="w-24 text-xs uppercase tracking-wide text-center leading-snug opacity-75">
                Add Profile Photo
              </span>
            </div>
          </div>
        </div>
      </section>
      <FieldEdit title="Your Name" content="Hii-chan" fieldNum={1} />
      <div className="px-8 pt-4 pb-6 text-gray-800 text-opacity-50 text-sm">
        This is not your username or pin. This name will be visible to your
        WhatsApp contacts
      </div>
      <FieldEdit
        title="About"
        content="Hey there! I am using WhatsApp."
        fieldNum={2}
      />
    </>
  );
};
